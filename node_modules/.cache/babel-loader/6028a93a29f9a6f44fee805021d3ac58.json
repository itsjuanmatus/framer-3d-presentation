{"ast":null,"code":"import _classCallCheck from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport var ExtendedTriangle = /*#__PURE__*/function (_Triangle) {\n  _inherits(ExtendedTriangle, _Triangle);\n\n  var _super = _createSuper(ExtendedTriangle);\n\n  function ExtendedTriangle() {\n    var _this;\n\n    _classCallCheck(this, ExtendedTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isExtendedTriangle = true;\n    _this.satAxes = new Array(4).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satBounds = new Array(4).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.points = [_this.a, _this.b, _this.c];\n    _this.sphere = new Sphere();\n    _this.plane = new Plane();\n    _this.needsUpdate = false;\n    return _this;\n  }\n\n  _createClass(ExtendedTriangle, [{\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return sphereIntersectTriangle(sphere, this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var points = this.points;\n      var satAxes = this.satAxes;\n      var satBounds = this.satBounds;\n      var axis0 = satAxes[0];\n      var sab0 = satBounds[0];\n      this.getNormal(axis0);\n      sab0.setFromPoints(axis0, points);\n      var axis1 = satAxes[1];\n      var sab1 = satBounds[1];\n      axis1.subVectors(a, b);\n      sab1.setFromPoints(axis1, points);\n      var axis2 = satAxes[2];\n      var sab2 = satBounds[2];\n      axis2.subVectors(b, c);\n      sab2.setFromPoints(axis2, points);\n      var axis3 = satAxes[3];\n      var sab3 = satBounds[3];\n      axis3.subVectors(c, a);\n      sab3.setFromPoints(axis3, points);\n      this.sphere.setFromPoints(this.points);\n      this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n      this.needsUpdate = false;\n    }\n  }]);\n\n  return ExtendedTriangle;\n}(Triangle);\n\nExtendedTriangle.prototype.closestPointToSegment = function () {\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var edge = new Line3();\n  return function distanceToSegment(segment) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var start = segment.start,\n        end = segment.end;\n    var points = this.points;\n    var distSq;\n    var closestDistanceSq = Infinity; // check the triangle edges\n\n    for (var i = 0; i < 3; i++) {\n      var nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nExtendedTriangle.prototype.intersectsTriangle = function () {\n  var saTri2 = new ExtendedTriangle();\n  var arr1 = new Array(3);\n  var arr2 = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  var dir1 = new Vector3();\n  var dir2 = new Vector3();\n  var tempDir = new Vector3();\n  var edge = new Line3();\n  var edge1 = new Line3();\n  var edge2 = new Line3(); // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n  // be a line contained by both triangles if not a different special case somehow represented in the return result.\n\n  return function intersectsTriangle(other) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isExtendedTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n\n    var plane1 = this.plane;\n    var plane2 = other.plane;\n\n    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n      // perform separating axis intersection test only for coplanar triangles\n      var satBounds1 = this.satBounds;\n      var satAxes1 = this.satAxes;\n      arr2[0] = other.a;\n      arr2[1] = other.b;\n      arr2[2] = other.c;\n\n      for (var i = 0; i < 4; i++) {\n        var sb = satBounds1[i];\n        var sa = satAxes1[i];\n        cachedSatBounds.setFromPoints(sa, arr2);\n        if (sb.isSeparated(cachedSatBounds)) return false;\n      }\n\n      var satBounds2 = other.satBounds;\n      var satAxes2 = other.satAxes;\n      arr1[0] = this.a;\n      arr1[1] = this.b;\n      arr1[2] = this.c;\n\n      for (var _i = 0; _i < 4; _i++) {\n        var _sb = satBounds2[_i];\n        var _sa = satAxes2[_i];\n        cachedSatBounds.setFromPoints(_sa, arr1);\n        if (_sb.isSeparated(cachedSatBounds)) return false;\n      } // check crossed axes\n\n\n      for (var _i2 = 0; _i2 < 4; _i2++) {\n        var sa1 = satAxes1[_i2];\n\n        for (var i2 = 0; i2 < 4; i2++) {\n          var sa2 = satAxes2[i2];\n          cachedAxis.crossVectors(sa1, sa2);\n          cachedSatBounds.setFromPoints(cachedAxis, arr1);\n          cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n          if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n        }\n      }\n\n      if (target) {\n        // TODO find two points that intersect on the edges and make that the result\n        console.warn('ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.');\n        target.start.set(0, 0, 0);\n        target.end.set(0, 0, 0);\n      }\n\n      return true;\n    } else {\n      // find the edge that intersects the other triangle plane\n      var points1 = this.points;\n      var found1 = false;\n      var count1 = 0;\n\n      for (var _i3 = 0; _i3 < 3; _i3++) {\n        var p1 = points1[_i3];\n        var p2 = points1[(_i3 + 1) % 3];\n        edge.start.copy(p1);\n        edge.end.copy(p2);\n        edge.delta(dir1);\n\n        if (plane2.normal.dot(dir1) === 0 && plane2.distanceToPoint(edge.start) === 0) {\n          // if the edge lies on the plane then take the line\n          edge1.copy(edge);\n          count1 = 2;\n          break;\n        } else if (plane2.intersectLine(edge, found1 ? edge1.start : edge1.end)) {\n          count1++;\n\n          if (found1) {\n            break;\n          }\n\n          found1 = true;\n        }\n      }\n\n      if (count1 !== 2) {\n        return false;\n      } // find the other triangles edge that intersects this plane\n\n\n      var points2 = other.points;\n      var found2 = false;\n      var count2 = 0;\n\n      for (var _i4 = 0; _i4 < 3; _i4++) {\n        var _p = points2[_i4];\n        var _p2 = points2[(_i4 + 1) % 3];\n        edge.start.copy(_p);\n        edge.end.copy(_p2);\n        edge.delta(dir2);\n\n        if (plane1.normal.dot(dir2) === 0 && plane1.distanceToPoint(edge.start) === 0) {\n          // if the edge lies on the plane then take the line\n          edge2.copy(edge);\n          count2 = 2;\n          break;\n        } else if (plane1.intersectLine(edge, found2 ? edge2.start : edge2.end)) {\n          count2++;\n\n          if (found2) {\n            break;\n          }\n\n          found2 = true;\n        }\n      }\n\n      if (count2 !== 2) {\n        return false;\n      } // find swap the second edge so both lines are running the same direction\n\n\n      edge1.delta(dir1);\n      edge2.delta(dir2);\n\n      if (dir1.dot(dir2) < 0) {\n        var tmp = edge2.start;\n        edge2.start = edge2.end;\n        edge2.end = tmp;\n      } // check if the edges are overlapping\n\n\n      var s1 = edge1.start.dot(dir1);\n      var e1 = edge1.end.dot(dir1);\n      var s2 = edge2.start.dot(dir1);\n      var e2 = edge2.end.dot(dir1);\n      var separated1 = e1 < s2;\n      var separated2 = s1 < e2;\n\n      if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n        return false;\n      } // assign the target output\n\n\n      if (target) {\n        tempDir.subVectors(edge1.start, edge2.start);\n\n        if (tempDir.dot(dir1) > 0) {\n          target.start.copy(edge1.start);\n        } else {\n          target.start.copy(edge2.start);\n        }\n\n        tempDir.subVectors(edge1.end, edge2.end);\n\n        if (tempDir.dot(dir1) < 0) {\n          target.end.copy(edge1.end);\n        } else {\n          target.end.copy(edge2.end);\n        }\n      }\n\n      return true;\n    }\n  };\n}();\n\nExtendedTriangle.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nExtendedTriangle.prototype.distanceToTriangle = function () {\n  var point = new Vector3();\n  var point2 = new Vector3();\n  var cornerFields = ['a', 'b', 'c'];\n  var line1 = new Line3();\n  var line2 = new Line3();\n  return function distanceToTriangle(other) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var lineTarget = target1 || target2 ? line1 : null;\n\n    if (this.intersectsTriangle(other, lineTarget)) {\n      if (target1 || target2) {\n        if (target1) lineTarget.getCenter(target1);\n        if (target2) lineTarget.getCenter(target2);\n      }\n\n      return 0;\n    }\n\n    var closestDistanceSq = Infinity; // check all point distances\n\n    for (var i = 0; i < 3; i++) {\n      var dist = void 0;\n      var field = cornerFields[i];\n      var otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      var thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (var _i5 = 0; _i5 < 3; _i5++) {\n      var f11 = cornerFields[_i5];\n      var f12 = cornerFields[(_i5 + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (var i2 = 0; i2 < 3; i2++) {\n        var f21 = cornerFields[i2];\n        var f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n\n        var _dist = point.distanceToSquared(point2);\n\n        if (_dist < closestDistanceSq) {\n          closestDistanceSq = _dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","Plane","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","ExtendedTriangle","args","isExtendedTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","plane","needsUpdate","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","setFromNormalAndCoplanarPoint","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","dir1","dir2","tempDir","edge1","edge2","other","target","update","plane1","plane2","abs","normal","dot","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","console","warn","set","points1","found1","count1","p1","p2","delta","distanceToPoint","intersectLine","points2","found2","count2","tmp","s1","e1","s2","e2","separated1","separated2","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","lineTarget","getCenter","dist","field","otherVec","thisVec","f11","f12","f21","f22"],"sources":["/Users/Juan/Documents/coding/framer-3d-button/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class ExtendedTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isExtendedTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.plane = new Plane();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\t\tconst points = this.points;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, points );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, points );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, points );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, points );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new ExtendedTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst tempDir = new Vector3();\r\n\tconst edge = new Line3();\r\n\tconst edge1 = new Line3();\r\n\tconst edge2 = new Line3();\r\n\r\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\r\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\r\n\treturn function intersectsTriangle( other, target = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isExtendedTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t} else if ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst plane1 = this.plane;\r\n\t\tconst plane2 = other.plane;\r\n\r\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\r\n\r\n\t\t\t// perform separating axis intersection test only for coplanar triangles\r\n\t\t\tconst satBounds1 = this.satBounds;\r\n\t\t\tconst satAxes1 = this.satAxes;\r\n\t\t\tarr2[ 0 ] = other.a;\r\n\t\t\tarr2[ 1 ] = other.b;\r\n\t\t\tarr2[ 2 ] = other.c;\r\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst satBounds2 = other.satBounds;\r\n\t\t\tconst satAxes2 = other.satAxes;\r\n\t\t\tarr1[ 0 ] = this.a;\r\n\t\t\tarr1[ 1 ] = this.b;\r\n\t\t\tarr1[ 2 ] = this.c;\r\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check crossed axes\r\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\r\n\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\r\n\r\n\t\t\t\ttarget.start.set( 0, 0, 0 );\r\n\t\t\t\ttarget.end.set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// find the edge that intersects the other triangle plane\r\n\t\t\tconst points1 = this.points;\r\n\t\t\tlet found1 = false;\r\n\t\t\tlet count1 = 0;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst p1 = points1[ i ];\r\n\t\t\t\tconst p2 = points1[ ( i + 1 ) % 3 ];\r\n\r\n\t\t\t\tedge.start.copy( p1 );\r\n\t\t\t\tedge.end.copy( p2 );\r\n\t\t\t\tedge.delta( dir1 );\r\n\t\t\t\tif ( plane2.normal.dot( dir1 ) === 0 && plane2.distanceToPoint( edge.start ) === 0 ) {\r\n\r\n\t\t\t\t\t// if the edge lies on the plane then take the line\r\n\t\t\t\t\tedge1.copy( edge );\r\n\t\t\t\t\tcount1 = 2;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t} else if ( plane2.intersectLine( edge, found1 ? edge1.start : edge1.end ) ) {\r\n\r\n\t\t\t\t\tcount1 ++;\r\n\t\t\t\t\tif ( found1 ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfound1 = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( count1 !== 2 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// find the other triangles edge that intersects this plane\r\n\t\t\tconst points2 = other.points;\r\n\t\t\tlet found2 = false;\r\n\t\t\tlet count2 = 0;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst p1 = points2[ i ];\r\n\t\t\t\tconst p2 = points2[ ( i + 1 ) % 3 ];\r\n\r\n\t\t\t\tedge.start.copy( p1 );\r\n\t\t\t\tedge.end.copy( p2 );\r\n\t\t\t\tedge.delta( dir2 );\r\n\t\t\t\tif ( plane1.normal.dot( dir2 ) === 0 && plane1.distanceToPoint( edge.start ) === 0 ) {\r\n\r\n\t\t\t\t\t// if the edge lies on the plane then take the line\r\n\t\t\t\t\tedge2.copy( edge );\r\n\t\t\t\t\tcount2 = 2;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t} else if ( plane1.intersectLine( edge, found2 ? edge2.start : edge2.end ) ) {\r\n\r\n\t\t\t\t\tcount2 ++;\r\n\t\t\t\t\tif ( found2 ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfound2 = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( count2 !== 2 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// find swap the second edge so both lines are running the same direction\r\n\t\t\tedge1.delta( dir1 );\r\n\t\t\tedge2.delta( dir2 );\r\n\r\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\r\n\r\n\t\t\t\tlet tmp = edge2.start;\r\n\t\t\t\tedge2.start = edge2.end;\r\n\t\t\t\tedge2.end = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check if the edges are overlapping\r\n\t\t\tconst s1 = edge1.start.dot( dir1 );\r\n\t\t\tconst e1 = edge1.end.dot( dir1 );\r\n\t\t\tconst s2 = edge2.start.dot( dir1 );\r\n\t\t\tconst e2 = edge2.end.dot( dir1 );\r\n\t\t\tconst separated1 = e1 < s2;\r\n\t\t\tconst separated2 = s1 < e2;\r\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// assign the target output\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\r\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge1.start );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge2.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\r\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\r\n\r\n\t\t\t\t\ttarget.end.copy( edge1.end );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget.end.copy( edge2.end );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nExtendedTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\r\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\r\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}