{"ast":null,"code":"import _createClass from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/Juan/Documents/coding/framer-3d-button/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderMaterial, Vector3, Color, Vector2 } from 'three';\n\nvar SpotLightMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(SpotLightMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(SpotLightMaterial);\n\n  function SpotLightMaterial() {\n    _classCallCheck(this, SpotLightMaterial);\n\n    return _super.call(this, {\n      uniforms: {\n        depth: {\n          value: null\n        },\n        attenuation: {\n          value: 2.5\n        },\n        anglePower: {\n          value: 12\n        },\n        spotPosition: {\n          value: new Vector3(0, 0, 0)\n        },\n        lightColor: {\n          value: new Color('white')\n        },\n        cameraNear: {\n          value: 0\n        },\n        cameraFar: {\n          value: 1\n        },\n        resolution: {\n          value: new Vector2(0, 0)\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      vertexShader:\n      /* glsl */\n      \"\\n      varying vec3 vNormal;\\n      varying vec3 vWorldPosition;\\n      varying float vViewZ;\\n      varying float vIntensity;\\n      uniform vec3 spotPosition;\\n      uniform float attenuation;\\n\\n      void main() {\\n        // compute intensity\\n        vNormal = normalize( normalMatrix * normal );\\n        vec4 worldPosition\\t= modelMatrix * vec4( position, 1.0 );\\n        vWorldPosition = worldPosition.xyz;\\n        vec4 viewPosition = viewMatrix * worldPosition;\\n        vViewZ = viewPosition.z;\\n        float intensity\\t= distance(worldPosition.xyz, spotPosition) / attenuation;\\n        intensity\\t= 1.0 - clamp(intensity, 0.0, 1.0);\\n        vIntensity = intensity;        \\n        // set gl_Position\\n        gl_Position\\t= projectionMatrix * viewPosition;\\n\\n      }\",\n      fragmentShader:\n      /* glsl */\n      \"\\n      #include <packing>\\n\\n      varying vec3 vNormal;\\n      varying vec3 vWorldPosition;\\n      uniform vec3 lightColor;\\n      uniform vec3 spotPosition;\\n      uniform float attenuation;\\n      uniform float anglePower;\\n      uniform sampler2D depth;\\n      uniform vec2 resolution;\\n      uniform float cameraNear;\\n      uniform float cameraFar;\\n      varying float vViewZ;\\n      varying float vIntensity;\\n\\n      float readDepth( sampler2D depthSampler, vec2 coord ) {\\n        float fragCoordZ = texture2D( depthSampler, coord ).x;\\n        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\\n        return viewZ;\\n      }\\n\\n      void main() {\\n        float d = 1.0;\\n        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\\n        if (isSoft) {\\n          vec2 sUv = gl_FragCoord.xy / resolution;\\n          d = readDepth(depth, sUv);\\n        }\\n        float intensity = vIntensity;\\n        vec3 normal\\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\\n        float angleIntensity\\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\\n        intensity\\t*= angleIntensity;\\n        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\\n        if (isSoft) {\\n          intensity\\t*= smoothstep(0., 1., vViewZ - d);\\n        }\\n        gl_FragColor = vec4(lightColor, intensity);\\n      }\"\n    });\n  }\n\n  return _createClass(SpotLightMaterial);\n}(ShaderMaterial);\n\nexport { SpotLightMaterial };","map":{"version":3,"names":["ShaderMaterial","Vector3","Color","Vector2","SpotLightMaterial","uniforms","depth","value","attenuation","anglePower","spotPosition","lightColor","cameraNear","cameraFar","resolution","transparent","depthWrite","vertexShader","fragmentShader"],"sources":["/Users/Juan/Documents/coding/framer-3d-button/node_modules/@react-three/drei/materials/SpotLightMaterial.js"],"sourcesContent":["import { ShaderMaterial, Vector3, Color, Vector2 } from 'three';\n\nclass SpotLightMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        depth: {\n          value: null\n        },\n        attenuation: {\n          value: 2.5\n        },\n        anglePower: {\n          value: 12\n        },\n        spotPosition: {\n          value: new Vector3(0, 0, 0)\n        },\n        lightColor: {\n          value: new Color('white')\n        },\n        cameraNear: {\n          value: 0\n        },\n        cameraFar: {\n          value: 1\n        },\n        resolution: {\n          value: new Vector2(0, 0)\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      vertexShader:\n      /* glsl */\n      `\n      varying vec3 vNormal;\n      varying vec3 vWorldPosition;\n      varying float vViewZ;\n      varying float vIntensity;\n      uniform vec3 spotPosition;\n      uniform float attenuation;\n\n      void main() {\n        // compute intensity\n        vNormal = normalize( normalMatrix * normal );\n        vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\n        vWorldPosition = worldPosition.xyz;\n        vec4 viewPosition = viewMatrix * worldPosition;\n        vViewZ = viewPosition.z;\n        float intensity\t= distance(worldPosition.xyz, spotPosition) / attenuation;\n        intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\n        vIntensity = intensity;        \n        // set gl_Position\n        gl_Position\t= projectionMatrix * viewPosition;\n\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      #include <packing>\n\n      varying vec3 vNormal;\n      varying vec3 vWorldPosition;\n      uniform vec3 lightColor;\n      uniform vec3 spotPosition;\n      uniform float attenuation;\n      uniform float anglePower;\n      uniform sampler2D depth;\n      uniform vec2 resolution;\n      uniform float cameraNear;\n      uniform float cameraFar;\n      varying float vViewZ;\n      varying float vIntensity;\n\n      float readDepth( sampler2D depthSampler, vec2 coord ) {\n        float fragCoordZ = texture2D( depthSampler, coord ).x;\n        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\n        return viewZ;\n      }\n\n      void main() {\n        float d = 1.0;\n        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\n        if (isSoft) {\n          vec2 sUv = gl_FragCoord.xy / resolution;\n          d = readDepth(depth, sUv);\n        }\n        float intensity = vIntensity;\n        vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\n        float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\n        intensity\t*= angleIntensity;\n        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\n        if (isSoft) {\n          intensity\t*= smoothstep(0., 1., vViewZ - d);\n        }\n        gl_FragColor = vec4(lightColor, intensity);\n      }`\n    });\n  }\n\n}\n\nexport { SpotLightMaterial };\n"],"mappings":";;;;AAAA,SAASA,cAAT,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,OAAzC,QAAwD,OAAxD;;IAEMC,iB;;;;;EACJ,6BAAc;IAAA;;IAAA,yBACN;MACJC,QAAQ,EAAE;QACRC,KAAK,EAAE;UACLC,KAAK,EAAE;QADF,CADC;QAIRC,WAAW,EAAE;UACXD,KAAK,EAAE;QADI,CAJL;QAORE,UAAU,EAAE;UACVF,KAAK,EAAE;QADG,CAPJ;QAURG,YAAY,EAAE;UACZH,KAAK,EAAE,IAAIN,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;QADK,CAVN;QAaRU,UAAU,EAAE;UACVJ,KAAK,EAAE,IAAIL,KAAJ,CAAU,OAAV;QADG,CAbJ;QAgBRU,UAAU,EAAE;UACVL,KAAK,EAAE;QADG,CAhBJ;QAmBRM,SAAS,EAAE;UACTN,KAAK,EAAE;QADE,CAnBH;QAsBRO,UAAU,EAAE;UACVP,KAAK,EAAE,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf;QADG;MAtBJ,CADN;MA2BJY,WAAW,EAAE,IA3BT;MA4BJC,UAAU,EAAE,KA5BR;MA6BJC,YAAY;MACZ;MADY,mxBA7BR;MAqDJC,cAAc;MACd;MADc;IArDV,CADM;EAgGb;;;EAjG6BlB,c;;AAqGhC,SAASI,iBAAT"},"metadata":{},"sourceType":"module"}